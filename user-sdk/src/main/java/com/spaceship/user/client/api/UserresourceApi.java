/*
 * User Protocal API
 * User Protocal API help for commincate between users
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spaceship.user.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;
import com.spaceship.user.client.ApiCallback;
import com.spaceship.user.client.ApiClient;
import com.spaceship.user.client.UserApiException;
import com.spaceship.user.client.ApiResponse;
import com.spaceship.user.client.Configuration;
import com.spaceship.user.client.Pair;
import com.spaceship.user.client.ProgressRequestBody;
import com.spaceship.user.client.ProgressResponseBody;
import com.spaceship.user.client.model.InlineResponse2001;
import com.spaceship.user.client.model.PUser;

public class UserresourceApi {
	private ApiClient apiClient;

	public UserresourceApi() {
		this(Configuration.getDefaultApiClient());
	}

	public UserresourceApi(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return apiClient;
	}

	public void setApiClient(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	/* Build call for createUserUsingPOST */
	private com.squareup.okhttp.Call createUserUsingPOSTCall(PUser pUser,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws UserApiException {
		Object localVarPostBody = pUser;

		// create path and map variables
		String localVarPath = "/xl-spaceship/user/createUser".replaceAll("\\{format\\}", "json");

		List<Pair> localVarQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] {};
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams,
				localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	private com.squareup.okhttp.Call createUserUsingPOSTValidateBeforeCall(PUser pUser,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws UserApiException {

		// verify the required parameter 'pUser' is set
		if (pUser == null) {
			throw new UserApiException(
					"Missing the required parameter 'pUser' when calling createUserUsingPOST(Async)");
		}

		com.squareup.okhttp.Call call = createUserUsingPOSTCall(pUser, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Create User
	 *
	 * @param pUser
	 *            pUser (required)
	 * @return PUser
	 * @throws UserApiException
	 *             If fail to call the API, e.g. server error or cannot
	 *             deserialize the response body
	 */
	public PUser createUserUsingPOST(PUser pUser) throws UserApiException {
		ApiResponse<PUser> resp = createUserUsingPOSTWithHttpInfo(pUser);
		return resp.getData();
	}

	/**
	 * Create User
	 *
	 * @param pUser
	 *            pUser (required)
	 * @return ApiResponse&lt;PUser&gt;
	 * @throws UserApiException
	 *             If fail to call the API, e.g. server error or cannot
	 *             deserialize the response body
	 */
	public ApiResponse<PUser> createUserUsingPOSTWithHttpInfo(PUser pUser) throws UserApiException {
		com.squareup.okhttp.Call call = createUserUsingPOSTValidateBeforeCall(pUser, null, null);
		Type localVarReturnType = new TypeToken<PUser>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Create User (asynchronously)
	 *
	 * @param pUser
	 *            pUser (required)
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws UserApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call createUserUsingPOSTAsync(PUser pUser, final ApiCallback<PUser> callback)
			throws UserApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = createUserUsingPOSTValidateBeforeCall(pUser, progressListener,
				progressRequestListener);
		Type localVarReturnType = new TypeToken<PUser>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/* Build call for getAllOpponentUsersUsingGET */
	private com.squareup.okhttp.Call getAllOpponentUsersUsingGETCall(String userId,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws UserApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/xl-spaceship/user/getAllOpponentUsers".replaceAll("\\{format\\}", "json");

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		if (userId != null)
			localVarQueryParams.addAll(apiClient.parameterToPairs("", "userId", userId));

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] {};
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams,
				localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	private com.squareup.okhttp.Call getAllOpponentUsersUsingGETValidateBeforeCall(String userId,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws UserApiException {

		// verify the required parameter 'userId' is set
		if (userId == null) {
			throw new UserApiException(
					"Missing the required parameter 'userId' when calling getAllOpponentUsersUsingGET(Async)");
		}

		com.squareup.okhttp.Call call = getAllOpponentUsersUsingGETCall(userId, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * get all opponent users
	 *
	 * @param userId
	 *            userId (required)
	 * @return List&lt;InlineResponse2001&gt;
	 * @throws UserApiException
	 *             If fail to call the API, e.g. server error or cannot
	 *             deserialize the response body
	 */
	public List<InlineResponse2001> getAllOpponentUsersUsingGET(String userId) throws UserApiException {
		ApiResponse<List<InlineResponse2001>> resp = getAllOpponentUsersUsingGETWithHttpInfo(userId);
		return resp.getData();
	}

	/**
	 * get all opponent users
	 *
	 * @param userId
	 *            userId (required)
	 * @return ApiResponse&lt;List&lt;InlineResponse2001&gt;&gt;
	 * @throws UserApiException
	 *             If fail to call the API, e.g. server error or cannot
	 *             deserialize the response body
	 */
	public ApiResponse<List<InlineResponse2001>> getAllOpponentUsersUsingGETWithHttpInfo(String userId)
			throws UserApiException {
		com.squareup.okhttp.Call call = getAllOpponentUsersUsingGETValidateBeforeCall(userId, null, null);
		Type localVarReturnType = new TypeToken<List<InlineResponse2001>>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * get all opponent users (asynchronously)
	 *
	 * @param userId
	 *            userId (required)
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws UserApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call getAllOpponentUsersUsingGETAsync(String userId,
			final ApiCallback<List<InlineResponse2001>> callback) throws UserApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = getAllOpponentUsersUsingGETValidateBeforeCall(userId, progressListener,
				progressRequestListener);
		Type localVarReturnType = new TypeToken<List<InlineResponse2001>>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/* Build call for getAllUsersUsingGET */
	private com.squareup.okhttp.Call getAllUsersUsingGETCall(
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws UserApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/xl-spaceship/user/getAllUsers".replaceAll("\\{format\\}", "json");

		List<Pair> localVarQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] {};
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams,
				localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	private com.squareup.okhttp.Call getAllUsersUsingGETValidateBeforeCall(
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws UserApiException {

		com.squareup.okhttp.Call call = getAllUsersUsingGETCall(progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Get all users
	 *
	 * @return List&lt;InlineResponse2001&gt;
	 * @throws UserApiException
	 *             If fail to call the API, e.g. server error or cannot
	 *             deserialize the response body
	 */
	public List<InlineResponse2001> getAllUsersUsingGET() throws UserApiException {
		ApiResponse<List<InlineResponse2001>> resp = getAllUsersUsingGETWithHttpInfo();
		return resp.getData();
	}

	/**
	 * Get all users
	 *
	 * @return ApiResponse&lt;List&lt;InlineResponse2001&gt;&gt;
	 * @throws UserApiException
	 *             If fail to call the API, e.g. server error or cannot
	 *             deserialize the response body
	 */
	public ApiResponse<List<InlineResponse2001>> getAllUsersUsingGETWithHttpInfo() throws UserApiException {
		com.squareup.okhttp.Call call = getAllUsersUsingGETValidateBeforeCall(null, null);
		Type localVarReturnType = new TypeToken<List<InlineResponse2001>>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Get all users (asynchronously)
	 *
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws UserApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call getAllUsersUsingGETAsync(final ApiCallback<List<InlineResponse2001>> callback)
			throws UserApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = getAllUsersUsingGETValidateBeforeCall(progressListener,
				progressRequestListener);
		Type localVarReturnType = new TypeToken<List<InlineResponse2001>>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/* Build call for getUserByUserNameUsingGET */
	private com.squareup.okhttp.Call getUserByUserNameUsingGETCall(String userId,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws UserApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/xl-spaceship/user/getUserByUserName".replaceAll("\\{format\\}", "json");

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		if (userId != null)
			localVarQueryParams.addAll(apiClient.parameterToPairs("", "userId", userId));

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] {};
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams,
				localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	private com.squareup.okhttp.Call getUserByUserNameUsingGETValidateBeforeCall(String userId,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws UserApiException {

		// verify the required parameter 'userId' is set
		if (userId == null) {
			throw new UserApiException(
					"Missing the required parameter 'userId' when calling getUserByUserNameUsingGET(Async)");
		}

		com.squareup.okhttp.Call call = getUserByUserNameUsingGETCall(userId, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * Get user by username
	 *
	 * @param userId
	 *            userId (required)
	 * @return PUser
	 * @throws UserApiException
	 *             If fail to call the API, e.g. server error or cannot
	 *             deserialize the response body
	 */
	public PUser getUserByUserNameUsingGET(String userId) throws UserApiException {
		ApiResponse<PUser> resp = getUserByUserNameUsingGETWithHttpInfo(userId);
		return resp.getData();
	}

	/**
	 * Get user by username
	 *
	 * @param userId
	 *            userId (required)
	 * @return ApiResponse&lt;PUser&gt;
	 * @throws UserApiException
	 *             If fail to call the API, e.g. server error or cannot
	 *             deserialize the response body
	 */
	public ApiResponse<PUser> getUserByUserNameUsingGETWithHttpInfo(String userId) throws UserApiException {
		com.squareup.okhttp.Call call = getUserByUserNameUsingGETValidateBeforeCall(userId, null, null);
		Type localVarReturnType = new TypeToken<PUser>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Get user by username (asynchronously)
	 *
	 * @param userId
	 *            userId (required)
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws UserApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call getUserByUserNameUsingGETAsync(String userId, final ApiCallback<PUser> callback)
			throws UserApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = getUserByUserNameUsingGETValidateBeforeCall(userId, progressListener,
				progressRequestListener);
		Type localVarReturnType = new TypeToken<PUser>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}
}
