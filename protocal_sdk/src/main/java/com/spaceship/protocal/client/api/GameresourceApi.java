/*
 * Spaceship Protocal API
 * Spaceship Protocal API help for commincate between spaceships
 * OpenAPI spec version: 1.0
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spaceship.protocal.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;
import com.spaceship.protocal.client.ApiCallback;
import com.spaceship.protocal.client.ApiClient;
import com.spaceship.protocal.client.ApiResponse;
import com.spaceship.protocal.client.Configuration;
import com.spaceship.protocal.client.Pair;
import com.spaceship.protocal.client.ProgressRequestBody;
import com.spaceship.protocal.client.ProgressResponseBody;
import com.spaceship.protocal.client.ProtocalApiException;
import com.spaceship.protocal.client.model.GameRequest;
import com.spaceship.protocal.client.model.GameResponse;
import com.spaceship.protocal.client.model.GameStatusResponse;
import com.spaceship.protocal.client.model.InlineResponse2002;
import com.spaceship.protocal.client.model.SalvoShot;

public class GameresourceApi {
    private ApiClient apiClient;

    public GameresourceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GameresourceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createNewGameUsingPOST */
    private com.squareup.okhttp.Call createNewGameUsingPOSTCall(GameRequest pGameRequest, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ProtocalApiException {
        Object localVarPostBody = pGameRequest;

        // create path and map variables
        String localVarPath = "/xl-spaceship/protocol/game/new".replaceAll("\\{format\\}", "json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = { "application/json" };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call createNewGameUsingPOSTValidateBeforeCall(GameRequest pGameRequest, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ProtocalApiException {

        // verify the required parameter 'pGameRequest' is set
        if (pGameRequest == null) {
            throw new ProtocalApiException("Missing the required parameter 'pGameRequest' when calling createNewGameUsingPOST(Async)");
        }

        com.squareup.okhttp.Call call = createNewGameUsingPOSTCall(pGameRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create new game
     *
     * @param pGameRequest
     *        pGameRequest (required)
     * @return InlineResponse200
     * @throws ProtocalApiException
     *         If fail to call the API, e.g. server error or cannot deserialize
     *         the response body
     */
    public GameResponse createNewGameUsingPOST(GameRequest pGameRequest) throws ProtocalApiException {
        ApiResponse<GameResponse> resp = createNewGameUsingPOSTWithHttpInfo(pGameRequest);
        return resp.getData();
    }

    /**
     * Create new game
     *
     * @param pGameRequest
     *        pGameRequest (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ProtocalApiException
     *         If fail to call the API, e.g. server error or cannot deserialize
     *         the response body
     */
    public ApiResponse<GameResponse> createNewGameUsingPOSTWithHttpInfo(GameRequest pGameRequest) throws ProtocalApiException {
        com.squareup.okhttp.Call call = createNewGameUsingPOSTValidateBeforeCall(pGameRequest, null, null);
        Type localVarReturnType = new TypeToken<GameResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create new game (asynchronously)
     *
     * @param pGameRequest
     *        pGameRequest (required)
     * @param callback
     *        The callback to be executed when the API call finishes
     * @return The request call
     * @throws ProtocalApiException
     *         If fail to process the API call, e.g. serializing the request
     *         body object
     */
    public com.squareup.okhttp.Call createNewGameUsingPOSTAsync(GameRequest pGameRequest, final ApiCallback<GameResponse> callback) throws ProtocalApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNewGameUsingPOSTValidateBeforeCall(pGameRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GameResponse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /* Build call for disableAutoPilotUsingPUT */
    private com.squareup.okhttp.Call disableAutoPilotUsingPUTCall(String userid, String gameId, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ProtocalApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/xl-spaceship/protocol/game/disableautopilot/{userid}/{gameId}".replaceAll("\\{format\\}", "json")
                .replaceAll("\\{" + "userid" + "\\}", apiClient.escapeString(userid.toString())).replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = { "application/json" };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call disableAutoPilotUsingPUTValidateBeforeCall(String userid, String gameId, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ProtocalApiException {

        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ProtocalApiException("Missing the required parameter 'userid' when calling disableAutoPilotUsingPUT(Async)");
        }

        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ProtocalApiException("Missing the required parameter 'gameId' when calling disableAutoPilotUsingPUT(Async)");
        }

        com.squareup.okhttp.Call call = disableAutoPilotUsingPUTCall(userid, gameId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Disable auto pilot
     *
     * @param userid
     *        userId (required)
     * @param gameId
     *        gameId (required)
     * @throws ProtocalApiException
     *         If fail to call the API, e.g. server error or cannot deserialize
     *         the response body
     */
    public void disableAutoPilotUsingPUT(String userid, String gameId) throws ProtocalApiException {
        disableAutoPilotUsingPUTWithHttpInfo(userid, gameId);
    }

    /**
     * Disable auto pilot
     *
     * @param userid
     *        userId (required)
     * @param gameId
     *        gameId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ProtocalApiException
     *         If fail to call the API, e.g. server error or cannot deserialize
     *         the response body
     */
    public ApiResponse<Void> disableAutoPilotUsingPUTWithHttpInfo(String userid, String gameId) throws ProtocalApiException {
        com.squareup.okhttp.Call call = disableAutoPilotUsingPUTValidateBeforeCall(userid, gameId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Disable auto pilot (asynchronously)
     *
     * @param userid
     *        userId (required)
     * @param gameId
     *        gameId (required)
     * @param callback
     *        The callback to be executed when the API call finishes
     * @return The request call
     * @throws ProtocalApiException
     *         If fail to process the API call, e.g. serializing the request
     *         body object
     */
    public com.squareup.okhttp.Call disableAutoPilotUsingPUTAsync(String userid, String gameId, final ApiCallback<Void> callback) throws ProtocalApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = disableAutoPilotUsingPUTValidateBeforeCall(userid, gameId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /* Build call for enableAutoPilotUsingPUT */
    private com.squareup.okhttp.Call enableAutoPilotUsingPUTCall(String userid, String gameId, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ProtocalApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/xl-spaceship/protocol/game/enableautopilot/{userid}/{gameId}".replaceAll("\\{format\\}", "json")
                .replaceAll("\\{" + "userid" + "\\}", apiClient.escapeString(userid.toString())).replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = { "application/json" };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call enableAutoPilotUsingPUTValidateBeforeCall(String userid, String gameId, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ProtocalApiException {

        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ProtocalApiException("Missing the required parameter 'userid' when calling enableAutoPilotUsingPUT(Async)");
        }

        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ProtocalApiException("Missing the required parameter 'gameId' when calling enableAutoPilotUsingPUT(Async)");
        }

        com.squareup.okhttp.Call call = enableAutoPilotUsingPUTCall(userid, gameId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Enable auto pilot
     *
     * @param userid
     *        userId (required)
     * @param gameId
     *        gameId (required)
     * @throws ProtocalApiException
     *         If fail to call the API, e.g. server error or cannot deserialize
     *         the response body
     */
    public void enableAutoPilotUsingPUT(String userid, String gameId) throws ProtocalApiException {
        enableAutoPilotUsingPUTWithHttpInfo(userid, gameId);
    }

    /**
     * Enable auto pilot
     *
     * @param userid
     *        userId (required)
     * @param gameId
     *        gameId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ProtocalApiException
     *         If fail to call the API, e.g. server error or cannot deserialize
     *         the response body
     */
    public ApiResponse<Void> enableAutoPilotUsingPUTWithHttpInfo(String userid, String gameId) throws ProtocalApiException {
        com.squareup.okhttp.Call call = enableAutoPilotUsingPUTValidateBeforeCall(userid, gameId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Enable auto pilot (asynchronously)
     *
     * @param userid
     *        userId (required)
     * @param gameId
     *        gameId (required)
     * @param callback
     *        The callback to be executed when the API call finishes
     * @return The request call
     * @throws ProtocalApiException
     *         If fail to process the API call, e.g. serializing the request
     *         body object
     */
    public com.squareup.okhttp.Call enableAutoPilotUsingPUTAsync(String userid, String gameId, final ApiCallback<Void> callback) throws ProtocalApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = enableAutoPilotUsingPUTValidateBeforeCall(userid, gameId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /* Build call for getAllGamesByUserIdUsingGET */
    private com.squareup.okhttp.Call getAllGamesByUserIdUsingGETCall(String id, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ProtocalApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/xl-spaceship/protocol/game/getallgames/{id}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = { "application/json" };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getAllGamesByUserIdUsingGETValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ProtocalApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ProtocalApiException("Missing the required parameter 'id' when calling getAllGamesByUserIdUsingGET(Async)");
        }

        com.squareup.okhttp.Call call = getAllGamesByUserIdUsingGETCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all games by user id
     *
     * @param id
     *        userId (required)
     * @return List&lt;InlineResponse200&gt;
     * @throws ProtocalApiException
     *         If fail to call the API, e.g. server error or cannot deserialize
     *         the response body
     */
    public List<GameResponse> getAllGamesByUserIdUsingGET(String id) throws ProtocalApiException {
        ApiResponse<List<GameResponse>> resp = getAllGamesByUserIdUsingGETWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get all games by user id
     *
     * @param id
     *        userId (required)
     * @return ApiResponse&lt;List&lt;InlineResponse200&gt;&gt;
     * @throws ProtocalApiException
     *         If fail to call the API, e.g. server error or cannot deserialize
     *         the response body
     */
    public ApiResponse<List<GameResponse>> getAllGamesByUserIdUsingGETWithHttpInfo(String id) throws ProtocalApiException {
        com.squareup.okhttp.Call call = getAllGamesByUserIdUsingGETValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<List<GameResponse>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all games by user id (asynchronously)
     *
     * @param id
     *        userId (required)
     * @param callback
     *        The callback to be executed when the API call finishes
     * @return The request call
     * @throws ProtocalApiException
     *         If fail to process the API call, e.g. serializing the request
     *         body object
     */
    public com.squareup.okhttp.Call getAllGamesByUserIdUsingGETAsync(String id, final ApiCallback<List<GameResponse>> callback) throws ProtocalApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllGamesByUserIdUsingGETValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<GameResponse>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /* Build call for getGameStatusUsingGET */
    private com.squareup.okhttp.Call getGameStatusUsingGETCall(String id, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ProtocalApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/xl-spaceship/protocol/game/{id}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = { "application/json" };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getGameStatusUsingGETValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ProtocalApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ProtocalApiException("Missing the required parameter 'id' when calling getGameStatusUsingGET(Async)");
        }

        com.squareup.okhttp.Call call = getGameStatusUsingGETCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get game status
     *
     * @param id
     *        gameId (required)
     * @return InlineResponse2001
     * @throws ProtocalApiException
     *         If fail to call the API, e.g. server error or cannot deserialize
     *         the response body
     */
    public GameStatusResponse getGameStatusUsingGET(String id) throws ProtocalApiException {
        ApiResponse<GameStatusResponse> resp = getGameStatusUsingGETWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get game status
     *
     * @param id
     *        gameId (required)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ProtocalApiException
     *         If fail to call the API, e.g. server error or cannot deserialize
     *         the response body
     */
    public ApiResponse<GameStatusResponse> getGameStatusUsingGETWithHttpInfo(String id) throws ProtocalApiException {
        com.squareup.okhttp.Call call = getGameStatusUsingGETValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<GameStatusResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get game status (asynchronously)
     *
     * @param id
     *        gameId (required)
     * @param callback
     *        The callback to be executed when the API call finishes
     * @return The request call
     * @throws ProtocalApiException
     *         If fail to process the API call, e.g. serializing the request
     *         body object
     */
    public com.squareup.okhttp.Call getGameStatusUsingGETAsync(String id, final ApiCallback<GameStatusResponse> callback) throws ProtocalApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGameStatusUsingGETValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GameStatusResponse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /* Build call for getSalvoShotsNumberUsingGET */
    private com.squareup.okhttp.Call getSalvoShotsNumberUsingGETCall(String id, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ProtocalApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/xl-spaceship/protocol/game/getsalvoshotcount/{id}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = { "application/json" };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getSalvoShotsNumberUsingGETValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ProtocalApiException {

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ProtocalApiException("Missing the required parameter 'id' when calling getSalvoShotsNumberUsingGET(Async)");
        }

        com.squareup.okhttp.Call call = getSalvoShotsNumberUsingGETCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Salvo Shots Number
     *
     * @param id
     *        gameId (required)
     * @return Integer
     * @throws ProtocalApiException
     *         If fail to call the API, e.g. server error or cannot deserialize
     *         the response body
     */
    public Integer getSalvoShotsNumberUsingGET(String id) throws ProtocalApiException {
        ApiResponse<Integer> resp = getSalvoShotsNumberUsingGETWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Salvo Shots Number
     *
     * @param id
     *        gameId (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ProtocalApiException
     *         If fail to call the API, e.g. server error or cannot deserialize
     *         the response body
     */
    public ApiResponse<Integer> getSalvoShotsNumberUsingGETWithHttpInfo(String id) throws ProtocalApiException {
        com.squareup.okhttp.Call call = getSalvoShotsNumberUsingGETValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<Integer>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Salvo Shots Number (asynchronously)
     *
     * @param id
     *        gameId (required)
     * @param callback
     *        The callback to be executed when the API call finishes
     * @return The request call
     * @throws ProtocalApiException
     *         If fail to process the API call, e.g. serializing the request
     *         body object
     */
    public com.squareup.okhttp.Call getSalvoShotsNumberUsingGETAsync(String id, final ApiCallback<Integer> callback) throws ProtocalApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSalvoShotsNumberUsingGETValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /* Build call for receiveFireUsingPUT */
    private com.squareup.okhttp.Call receiveFireUsingPUTCall(SalvoShot salvoShot, String id, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ProtocalApiException {
        Object localVarPostBody = salvoShot;

        // create path and map variables
        String localVarPath = "/xl-spaceship/protocol/game/{id}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = { "application/json" };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call receiveFireUsingPUTValidateBeforeCall(SalvoShot salvoShot, String id, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ProtocalApiException {

        // verify the required parameter 'salvoShot' is set
        if (salvoShot == null) {
            throw new ProtocalApiException("Missing the required parameter 'salvoShot' when calling receiveFireUsingPUT(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ProtocalApiException("Missing the required parameter 'id' when calling receiveFireUsingPUT(Async)");
        }

        com.squareup.okhttp.Call call = receiveFireUsingPUTCall(salvoShot, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Receive fire
     *
     * @param salvoShot
     *        salvoShot (required)
     * @param id
     *        gameId (required)
     * @return InlineResponse2002
     * @throws ProtocalApiException
     *         If fail to call the API, e.g. server error or cannot deserialize
     *         the response body
     */
    public InlineResponse2002 receiveFireUsingPUT(SalvoShot salvoShot, String id) throws ProtocalApiException {
        ApiResponse<InlineResponse2002> resp = receiveFireUsingPUTWithHttpInfo(salvoShot, id);
        return resp.getData();
    }

    /**
     * Receive fire
     *
     * @param salvoShot
     *        salvoShot (required)
     * @param id
     *        gameId (required)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ProtocalApiException
     *         If fail to call the API, e.g. server error or cannot deserialize
     *         the response body
     */
    public ApiResponse<InlineResponse2002> receiveFireUsingPUTWithHttpInfo(SalvoShot salvoShot, String id) throws ProtocalApiException {
        com.squareup.okhttp.Call call = receiveFireUsingPUTValidateBeforeCall(salvoShot, id, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Receive fire (asynchronously)
     *
     * @param salvoShot
     *        salvoShot (required)
     * @param id
     *        gameId (required)
     * @param callback
     *        The callback to be executed when the API call finishes
     * @return The request call
     * @throws ProtocalApiException
     *         If fail to process the API call, e.g. serializing the request
     *         body object
     */
    public com.squareup.okhttp.Call receiveFireUsingPUTAsync(SalvoShot salvoShot, String id, final ApiCallback<InlineResponse2002> callback) throws ProtocalApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = receiveFireUsingPUTValidateBeforeCall(salvoShot, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2002>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /* Build call for getAutoPilotStatusUsingGET */
    private com.squareup.okhttp.Call getAutoPilotStatusUsingGETCall(String userid, String gameId, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ProtocalApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/xl-spaceship/protocol/game/getAutoPilotStatus/{userid}/{gameId}".replaceAll("\\{format\\}", "json")
                .replaceAll("\\{" + "userid" + "\\}", apiClient.escapeString(userid.toString())).replaceAll("\\{" + "gameId" + "\\}", apiClient.escapeString(gameId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = { "application/json" };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call getAutoPilotStatusUsingGETValidateBeforeCall(String userid, String gameId, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ProtocalApiException {

        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ProtocalApiException("Missing the required parameter 'userid' when calling getAutoPilotStatusUsingGET(Async)");
        }

        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ProtocalApiException("Missing the required parameter 'gameId' when calling getAutoPilotStatusUsingGET(Async)");
        }

        com.squareup.okhttp.Call call = getAutoPilotStatusUsingGETCall(userid, gameId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get auto pilot
     *
     * @param userid
     *        userId (required)
     * @param gameId
     *        gameId (required)
     * @return Boolean
     * @throws ProtocalApiException
     *         If fail to call the API, e.g. server error or cannot deserialize
     *         the response body
     */
    public Boolean getAutoPilotStatusUsingGET(String userid, String gameId) throws ProtocalApiException {
        ApiResponse<Boolean> resp = getAutoPilotStatusUsingGETWithHttpInfo(userid, gameId);
        return resp.getData();
    }

    /**
     * Get auto pilot
     *
     * @param userid
     *        userId (required)
     * @param gameId
     *        gameId (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ProtocalApiException
     *         If fail to call the API, e.g. server error or cannot deserialize
     *         the response body
     */
    public ApiResponse<Boolean> getAutoPilotStatusUsingGETWithHttpInfo(String userid, String gameId) throws ProtocalApiException {
        com.squareup.okhttp.Call call = getAutoPilotStatusUsingGETValidateBeforeCall(userid, gameId, null, null);
        Type localVarReturnType = new TypeToken<Boolean>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get auto pilot (asynchronously)
     *
     * @param userid
     *        userId (required)
     * @param gameId
     *        gameId (required)
     * @param callback
     *        The callback to be executed when the API call finishes
     * @return The request call
     * @throws ProtocalApiException
     *         If fail to process the API call, e.g. serializing the request
     *         body object
     */
    public com.squareup.okhttp.Call getAutoPilotStatusUsingGETAsync(String userid, String gameId, final ApiCallback<Boolean> callback) throws ProtocalApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAutoPilotStatusUsingGETValidateBeforeCall(userid, gameId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
