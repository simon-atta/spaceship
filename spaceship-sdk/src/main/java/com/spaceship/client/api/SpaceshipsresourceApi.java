/*
 * Spaceship API
 * Spaceship API help for commincate between spaceships
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spaceship.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;
import com.spaceship.client.ApiCallback;
import com.spaceship.client.ApiClient;
import com.spaceship.client.ApiException;
import com.spaceship.client.ApiResponse;
import com.spaceship.client.Configuration;
import com.spaceship.client.Pair;
import com.spaceship.client.ProgressRequestBody;
import com.spaceship.client.ProgressResponseBody;
import com.spaceship.client.model.InlineResponse2002;
import com.spaceship.client.model.InlineResponse2003;
import com.spaceship.client.model.InlineResponse2004;
import com.spaceship.client.model.SalvoShot;
import com.spaceship.client.model.SpaceshipRequest;

public class SpaceshipsresourceApi {
	private ApiClient apiClient;

	public SpaceshipsresourceApi() {
		this(Configuration.getDefaultApiClient());
	}

	public SpaceshipsresourceApi(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return apiClient;
	}

	public void setApiClient(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	/* Build call for getSpaceShipsShapesUsingGET */
	private com.squareup.okhttp.Call getSpaceShipsShapesUsingGETCall(
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/xl-spaceship/spaceships/getspaceshipsshapes".replaceAll("\\{format\\}", "json");

		List<Pair> localVarQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] {};
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams,
				localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	private com.squareup.okhttp.Call getSpaceShipsShapesUsingGETValidateBeforeCall(
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = getSpaceShipsShapesUsingGETCall(progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Get spaceships shapes
	 *
	 * @return List&lt;InlineResponse2003&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot
	 *             deserialize the response body
	 */
	public List<InlineResponse2003> getSpaceShipsShapesUsingGET() throws ApiException {
		ApiResponse<List<InlineResponse2003>> resp = getSpaceShipsShapesUsingGETWithHttpInfo();
		return resp.getData();
	}

	/**
	 * Get spaceships shapes
	 *
	 * @return ApiResponse&lt;List&lt;InlineResponse2003&gt;&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot
	 *             deserialize the response body
	 */
	public ApiResponse<List<InlineResponse2003>> getSpaceShipsShapesUsingGETWithHttpInfo() throws ApiException {
		com.squareup.okhttp.Call call = getSpaceShipsShapesUsingGETValidateBeforeCall(null, null);
		Type localVarReturnType = new TypeToken<List<InlineResponse2003>>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Get spaceships shapes (asynchronously)
	 *
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call getSpaceShipsShapesUsingGETAsync(
			final ApiCallback<List<InlineResponse2003>> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = getSpaceShipsShapesUsingGETValidateBeforeCall(progressListener,
				progressRequestListener);
		Type localVarReturnType = new TypeToken<List<InlineResponse2003>>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/* Build call for lockGameBoardUsingPUT */
	private com.squareup.okhttp.Call lockGameBoardUsingPUTCall(
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/xl-spaceship/spaceships/lockboard".replaceAll("\\{format\\}", "json");

		List<Pair> localVarQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] {};
		return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams,
				localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	private com.squareup.okhttp.Call lockGameBoardUsingPUTValidateBeforeCall(
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = lockGameBoardUsingPUTCall(progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Lock game board
	 *
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot
	 *             deserialize the response body
	 */
	public void lockGameBoardUsingPUT() throws ApiException {
		lockGameBoardUsingPUTWithHttpInfo();
	}

	/**
	 * Lock game board
	 *
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot
	 *             deserialize the response body
	 */
	public ApiResponse<Void> lockGameBoardUsingPUTWithHttpInfo() throws ApiException {
		com.squareup.okhttp.Call call = lockGameBoardUsingPUTValidateBeforeCall(null, null);
		return apiClient.execute(call);
	}

	/**
	 * Lock game board (asynchronously)
	 *
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call lockGameBoardUsingPUTAsync(final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = lockGameBoardUsingPUTValidateBeforeCall(progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/* Build call for placeSpaceshipUsingPOST */
	private com.squareup.okhttp.Call placeSpaceshipUsingPOSTCall(SpaceshipRequest spaceshipRequest,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = spaceshipRequest;

		// create path and map variables
		String localVarPath = "/xl-spaceship/spaceships/placespaceship".replaceAll("\\{format\\}", "json");

		List<Pair> localVarQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] {};
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams,
				localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	private com.squareup.okhttp.Call placeSpaceshipUsingPOSTValidateBeforeCall(SpaceshipRequest spaceshipRequest,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'spaceshipRequest' is set
		if (spaceshipRequest == null) {
			throw new ApiException(
					"Missing the required parameter 'spaceshipRequest' when calling placeSpaceshipUsingPOST(Async)");
		}

		com.squareup.okhttp.Call call = placeSpaceshipUsingPOSTCall(spaceshipRequest, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * Place spaceship into game board
	 *
	 * @param spaceshipRequest
	 *            spaceshipRequest (required)
	 * @return InlineResponse2004
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot
	 *             deserialize the response body
	 */
	public InlineResponse2004 placeSpaceshipUsingPOST(SpaceshipRequest spaceshipRequest) throws ApiException {
		ApiResponse<InlineResponse2004> resp = placeSpaceshipUsingPOSTWithHttpInfo(spaceshipRequest);
		return resp.getData();
	}

	/**
	 * Place spaceship into game board
	 *
	 * @param spaceshipRequest
	 *            spaceshipRequest (required)
	 * @return ApiResponse&lt;InlineResponse2004&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot
	 *             deserialize the response body
	 */
	public ApiResponse<InlineResponse2004> placeSpaceshipUsingPOSTWithHttpInfo(SpaceshipRequest spaceshipRequest)
			throws ApiException {
		com.squareup.okhttp.Call call = placeSpaceshipUsingPOSTValidateBeforeCall(spaceshipRequest, null, null);
		Type localVarReturnType = new TypeToken<InlineResponse2004>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Place spaceship into game board (asynchronously)
	 *
	 * @param spaceshipRequest
	 *            spaceshipRequest (required)
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call placeSpaceshipUsingPOSTAsync(SpaceshipRequest spaceshipRequest,
			final ApiCallback<InlineResponse2004> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = placeSpaceshipUsingPOSTValidateBeforeCall(spaceshipRequest, progressListener,
				progressRequestListener);
		Type localVarReturnType = new TypeToken<InlineResponse2004>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/* Build call for receiveFireUsingPUT */
	private com.squareup.okhttp.Call receiveFireUsingPUTCall(SalvoShot salvoShot,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = salvoShot;

		// create path and map variables
		String localVarPath = "/xl-spaceship/spaceships".replaceAll("\\{format\\}", "json");

		List<Pair> localVarQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] {};
		return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams,
				localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	private com.squareup.okhttp.Call receiveFireUsingPUTValidateBeforeCall(SalvoShot salvoShot,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'salvoShot' is set
		if (salvoShot == null) {
			throw new ApiException(
					"Missing the required parameter 'salvoShot' when calling receiveFireUsingPUT(Async)");
		}

		com.squareup.okhttp.Call call = receiveFireUsingPUTCall(salvoShot, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Receive fire
	 *
	 * @param salvoShot
	 *            salvoShot (required)
	 * @return InlineResponse2002
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot
	 *             deserialize the response body
	 */
	public InlineResponse2002 receiveFireUsingPUT(SalvoShot salvoShot) throws ApiException {
		ApiResponse<InlineResponse2002> resp = receiveFireUsingPUTWithHttpInfo(salvoShot);
		return resp.getData();
	}

	/**
	 * Receive fire
	 *
	 * @param salvoShot
	 *            salvoShot (required)
	 * @return ApiResponse&lt;InlineResponse2002&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot
	 *             deserialize the response body
	 */
	public ApiResponse<InlineResponse2002> receiveFireUsingPUTWithHttpInfo(SalvoShot salvoShot) throws ApiException {
		com.squareup.okhttp.Call call = receiveFireUsingPUTValidateBeforeCall(salvoShot, null, null);
		Type localVarReturnType = new TypeToken<InlineResponse2002>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Receive fire (asynchronously)
	 *
	 * @param salvoShot
	 *            salvoShot (required)
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call receiveFireUsingPUTAsync(SalvoShot salvoShot,
			final ApiCallback<InlineResponse2002> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = receiveFireUsingPUTValidateBeforeCall(salvoShot, progressListener,
				progressRequestListener);
		Type localVarReturnType = new TypeToken<InlineResponse2002>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/* Build call for unLockGameBoardUsingPUT */
	private com.squareup.okhttp.Call unLockGameBoardUsingPUTCall(
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/xl-spaceship/spaceships/unlockboard".replaceAll("\\{format\\}", "json");

		List<Pair> localVarQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] {};
		return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams,
				localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	private com.squareup.okhttp.Call unLockGameBoardUsingPUTValidateBeforeCall(
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = unLockGameBoardUsingPUTCall(progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Unlock game board
	 *
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot
	 *             deserialize the response body
	 */
	public void unLockGameBoardUsingPUT() throws ApiException {
		unLockGameBoardUsingPUTWithHttpInfo();
	}

	/**
	 * Unlock game board
	 *
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot
	 *             deserialize the response body
	 */
	public ApiResponse<Void> unLockGameBoardUsingPUTWithHttpInfo() throws ApiException {
		com.squareup.okhttp.Call call = unLockGameBoardUsingPUTValidateBeforeCall(null, null);
		return apiClient.execute(call);
	}

	/**
	 * Unlock game board (asynchronously)
	 *
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call unLockGameBoardUsingPUTAsync(final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = unLockGameBoardUsingPUTValidateBeforeCall(progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}
}
