/*
 * Spaceship API
 * Spaceship API help for commincate between spaceships
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.spaceship.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;
import com.spaceship.client.ApiCallback;
import com.spaceship.client.ApiClient;
import com.spaceship.client.ApiException;
import com.spaceship.client.ApiResponse;
import com.spaceship.client.Configuration;
import com.spaceship.client.Pair;
import com.spaceship.client.ProgressRequestBody;
import com.spaceship.client.ProgressResponseBody;
import com.spaceship.client.model.InlineResponse200;
import com.spaceship.client.model.InlineResponse2001;
import com.spaceship.client.model.XLSpaceshipRequest;

public class XlspaceshipresourceApi {
	private ApiClient apiClient;

	public XlspaceshipresourceApi() {
		this(Configuration.getDefaultApiClient());
	}

	public XlspaceshipresourceApi(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return apiClient;
	}

	public void setApiClient(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	/* Build call for getSpaceShipBoardUsingGET */
	private com.squareup.okhttp.Call getSpaceShipBoardUsingGETCall(
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/xl-spaceship/getspaceshipboard".replaceAll("\\{format\\}", "json");

		List<Pair> localVarQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] {};
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams,
				localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	private com.squareup.okhttp.Call getSpaceShipBoardUsingGETValidateBeforeCall(
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = getSpaceShipBoardUsingGETCall(progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Get XL-Spaceship board
	 *
	 * @return InlineResponse200
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot
	 *             deserialize the response body
	 */
	public InlineResponse200 getSpaceShipBoardUsingGET() throws ApiException {
		ApiResponse<InlineResponse200> resp = getSpaceShipBoardUsingGETWithHttpInfo();
		return resp.getData();
	}

	/**
	 * Get XL-Spaceship board
	 *
	 * @return ApiResponse&lt;InlineResponse200&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot
	 *             deserialize the response body
	 */
	public ApiResponse<InlineResponse200> getSpaceShipBoardUsingGETWithHttpInfo() throws ApiException {
		com.squareup.okhttp.Call call = getSpaceShipBoardUsingGETValidateBeforeCall(null, null);
		Type localVarReturnType = new TypeToken<InlineResponse200>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Get XL-Spaceship board (asynchronously)
	 *
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call getSpaceShipBoardUsingGETAsync(final ApiCallback<InlineResponse200> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = getSpaceShipBoardUsingGETValidateBeforeCall(progressListener,
				progressRequestListener);
		Type localVarReturnType = new TypeToken<InlineResponse200>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/* Build call for getSpaceshipByidUsingGET */
	private com.squareup.okhttp.Call getSpaceshipByidUsingGETCall(Long spaceshipId,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/xl-spaceship/getxlspaceshipbyid".replaceAll("\\{format\\}", "json");

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		if (spaceshipId != null)
			localVarQueryParams.addAll(apiClient.parameterToPairs("", "spaceshipId", spaceshipId));

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] {};
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams,
				localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	private com.squareup.okhttp.Call getSpaceshipByidUsingGETValidateBeforeCall(Long spaceshipId,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'spaceshipId' is set
		if (spaceshipId == null) {
			throw new ApiException(
					"Missing the required parameter 'spaceshipId' when calling getSpaceshipByidUsingGET(Async)");
		}

		com.squareup.okhttp.Call call = getSpaceshipByidUsingGETCall(spaceshipId, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * Get XL-Spaceship by id
	 *
	 * @param spaceshipId
	 *            spaceshipId (required)
	 * @return InlineResponse2001
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot
	 *             deserialize the response body
	 */
	public InlineResponse2001 getSpaceshipByidUsingGET(Long spaceshipId) throws ApiException {
		ApiResponse<InlineResponse2001> resp = getSpaceshipByidUsingGETWithHttpInfo(spaceshipId);
		return resp.getData();
	}

	/**
	 * Get XL-Spaceship by id
	 *
	 * @param spaceshipId
	 *            spaceshipId (required)
	 * @return ApiResponse&lt;InlineResponse2001&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot
	 *             deserialize the response body
	 */
	public ApiResponse<InlineResponse2001> getSpaceshipByidUsingGETWithHttpInfo(Long spaceshipId) throws ApiException {
		com.squareup.okhttp.Call call = getSpaceshipByidUsingGETValidateBeforeCall(spaceshipId, null, null);
		Type localVarReturnType = new TypeToken<InlineResponse2001>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Get XL-Spaceship by id (asynchronously)
	 *
	 * @param spaceshipId
	 *            spaceshipId (required)
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call getSpaceshipByidUsingGETAsync(Long spaceshipId,
			final ApiCallback<InlineResponse2001> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = getSpaceshipByidUsingGETValidateBeforeCall(spaceshipId, progressListener,
				progressRequestListener);
		Type localVarReturnType = new TypeToken<InlineResponse2001>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/* Build call for getSpaceshipsByUserIdUsingGET */
	private com.squareup.okhttp.Call getSpaceshipsByUserIdUsingGETCall(String userId,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/xl-spaceship/getxlspaceshipsbyuserId".replaceAll("\\{format\\}", "json");

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		if (userId != null)
			localVarQueryParams.addAll(apiClient.parameterToPairs("", "userId", userId));

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] {};
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams,
				localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	private com.squareup.okhttp.Call getSpaceshipsByUserIdUsingGETValidateBeforeCall(String userId,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'userId' is set
		if (userId == null) {
			throw new ApiException(
					"Missing the required parameter 'userId' when calling getSpaceshipsByUserIdUsingGET(Async)");
		}

		com.squareup.okhttp.Call call = getSpaceshipsByUserIdUsingGETCall(userId, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * Get XL-Spaceship by user id
	 *
	 * @param userId
	 *            userId (required)
	 * @return List&lt;InlineResponse2001&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot
	 *             deserialize the response body
	 */
	public List<InlineResponse2001> getSpaceshipsByUserIdUsingGET(String userId) throws ApiException {
		ApiResponse<List<InlineResponse2001>> resp = getSpaceshipsByUserIdUsingGETWithHttpInfo(userId);
		return resp.getData();
	}

	/**
	 * Get XL-Spaceship by user id
	 *
	 * @param userId
	 *            userId (required)
	 * @return ApiResponse&lt;List&lt;InlineResponse2001&gt;&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot
	 *             deserialize the response body
	 */
	public ApiResponse<List<InlineResponse2001>> getSpaceshipsByUserIdUsingGETWithHttpInfo(String userId)
			throws ApiException {
		com.squareup.okhttp.Call call = getSpaceshipsByUserIdUsingGETValidateBeforeCall(userId, null, null);
		Type localVarReturnType = new TypeToken<List<InlineResponse2001>>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Get XL-Spaceship by user id (asynchronously)
	 *
	 * @param userId
	 *            userId (required)
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call getSpaceshipsByUserIdUsingGETAsync(String userId,
			final ApiCallback<List<InlineResponse2001>> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = getSpaceshipsByUserIdUsingGETValidateBeforeCall(userId, progressListener,
				progressRequestListener);
		Type localVarReturnType = new TypeToken<List<InlineResponse2001>>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/* Build call for getSpaceshipsListUsingGET */
	private com.squareup.okhttp.Call getSpaceshipsListUsingGETCall(
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/xl-spaceship/getxlspaceshipslist".replaceAll("\\{format\\}", "json");

		List<Pair> localVarQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] {};
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams,
				localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	private com.squareup.okhttp.Call getSpaceshipsListUsingGETValidateBeforeCall(
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = getSpaceshipsListUsingGETCall(progressListener, progressRequestListener);
		return call;

	}

	/**
	 * List of all XL-spaceship
	 *
	 * @return List&lt;InlineResponse2001&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot
	 *             deserialize the response body
	 */
	public List<InlineResponse2001> getSpaceshipsListUsingGET() throws ApiException {
		ApiResponse<List<InlineResponse2001>> resp = getSpaceshipsListUsingGETWithHttpInfo();
		return resp.getData();
	}

	/**
	 * List of all XL-spaceship
	 *
	 * @return ApiResponse&lt;List&lt;InlineResponse2001&gt;&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot
	 *             deserialize the response body
	 */
	public ApiResponse<List<InlineResponse2001>> getSpaceshipsListUsingGETWithHttpInfo() throws ApiException {
		com.squareup.okhttp.Call call = getSpaceshipsListUsingGETValidateBeforeCall(null, null);
		Type localVarReturnType = new TypeToken<List<InlineResponse2001>>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * List of all XL-spaceship (asynchronously)
	 *
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call getSpaceshipsListUsingGETAsync(final ApiCallback<List<InlineResponse2001>> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = getSpaceshipsListUsingGETValidateBeforeCall(progressListener,
				progressRequestListener);
		Type localVarReturnType = new TypeToken<List<InlineResponse2001>>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/* Build call for initializeSpaceshipUsingPOST */
	private com.squareup.okhttp.Call initializeSpaceshipUsingPOSTCall(XLSpaceshipRequest xLSpaceshipRequest,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = xLSpaceshipRequest;

		// create path and map variables
		String localVarPath = "/xl-spaceship/initialize".replaceAll("\\{format\\}", "json");

		List<Pair> localVarQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = { "application/json" };
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] {};
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams,
				localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	private com.squareup.okhttp.Call initializeSpaceshipUsingPOSTValidateBeforeCall(
			XLSpaceshipRequest xLSpaceshipRequest, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		// verify the required parameter 'xLSpaceshipRequest' is set
		if (xLSpaceshipRequest == null) {
			throw new ApiException(
					"Missing the required parameter 'xLSpaceshipRequest' when calling initializeSpaceshipUsingPOST(Async)");
		}

		com.squareup.okhttp.Call call = initializeSpaceshipUsingPOSTCall(xLSpaceshipRequest, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * Initialize XL-spaceship
	 *
	 * @param xLSpaceshipRequest
	 *            xLSpaceshipRequest (required)
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot
	 *             deserialize the response body
	 */
	public void initializeSpaceshipUsingPOST(XLSpaceshipRequest xLSpaceshipRequest) throws ApiException {
		initializeSpaceshipUsingPOSTWithHttpInfo(xLSpaceshipRequest);
	}

	/**
	 * Initialize XL-spaceship
	 *
	 * @param xLSpaceshipRequest
	 *            xLSpaceshipRequest (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot
	 *             deserialize the response body
	 */
	public ApiResponse<Void> initializeSpaceshipUsingPOSTWithHttpInfo(XLSpaceshipRequest xLSpaceshipRequest)
			throws ApiException {
		com.squareup.okhttp.Call call = initializeSpaceshipUsingPOSTValidateBeforeCall(xLSpaceshipRequest, null, null);
		return apiClient.execute(call);
	}

	/**
	 * Initialize XL-spaceship (asynchronously)
	 *
	 * @param xLSpaceshipRequest
	 *            xLSpaceshipRequest (required)
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call initializeSpaceshipUsingPOSTAsync(XLSpaceshipRequest xLSpaceshipRequest,
			final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = initializeSpaceshipUsingPOSTValidateBeforeCall(xLSpaceshipRequest,
				progressListener, progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}
}
